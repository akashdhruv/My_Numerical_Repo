import numpy as np 
import matplotlib.pyplot as plt 


# ---------- code rewritten with the CFL condition --------

def linearconv(nx):
	"""
	solve linear convection eqn

	same as fn above with CFL condition
	- dt computed using CFL of 0.5

	Parameters: nx - int - internal grid points
	Returns: none
	"""

	# IC
	dx = 1./(nx-1)
	nt = 800
	c = 1.
	sigma = 1./2. # CFL condition

	dt =sigma*dx/c

	# hat fn
	x=0;
	u = np.ones(nx)
	#for i in range(len(u)):
	#	x=x+dx
	#	if(x<=0.9):
	#		u[i]=0.0
	#	elif(x>0.9 and x<=1.0):
	#		u[i]=10*(x-0.9)
	#	elif(x>1 and x<=1.1):
	#		u[i]=10*(1.1-x)
	#	elif(x>1.1):
	#		u[i]=0

	for i in range(len(u)):
		x=x+dx
		if(x<=0.5):
			u[i]=1.0
		elif(x>0.5 and x<=1.0):
			u[i]=0.0
	print x
	un = np.ones(nx)
	u_ini=u.copy()

	time =0
	while (time<=100):
		un = u.copy()
		for j in range(1,nx-1):
		
			#u[j] = 0.5*(un[j+1]+un[j-1]) - c*dt/(2*dx)*(un[j+1]-un[j-1]) # Lax-Scheme
			u[j] = un[j] - c*dt/(dx)*(un[j]-un[j-1]) # First order upwind
			#u[j] = un[j] - c*dt/(2*dx)*(un[j+1]-un[j-1]) # Central Difference

		u[0]=u[-1]
		u[nx-1]=u[1]
		time=time+dt
	
	plt.figure()
	plt.plot(np.linspace(0,3,nx), u,'b')
	plt.plot(np.linspace(0,3,nx),u_ini,'--r')
	plt.ylim(0,2.5)
	plt.show()
# testing modified linear convection fn
nx=900
linearconv(nx)


