
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams
rcParams['font.family'] = 'serif'
rcParams['font.size'] = 16




nx = 81
dx = 0.25
dt = 0.0002
nt = .2/dt
gamma = 1.4

x = linspace(-10,10,nx)
sigma= dt/dx



#U Matrix

#u1_l = np.arange(nx/2.0)
#u1_l[0:] = 1             #density kg/m3
#u2_l = np.arange(nx/2.0)
#u2_l[0:] = 0             #velocity m/s
#u3_l = np.arange(nx/2.0)
#u3_l[0:] = 100           #pressure kN/m2

#u1_r = np.arange(nx/2.0)
#u1_r[0:] = 0.125         #density kg/m3
#u2_r = np.arange(nx/2.0)
#u2_r[0:] = 0             #velocity m/s
#u3_r = np.arange(nx/2.0)
#u3_r[0:] = 10            #pressure kN/m2

##HHHHOOODDDDOOOORRRRRR
u1 = np.arange(nx,dtype=np.ndarray)
u1[0:(nx-1)/2] = 1
u1[(nx-1)/2:] = 0.125

u2 = np.zeros(nx)

u3 = np.arange(nx,dtype=np.ndarray)
u3[0:(nx-1)/2] = 100
u3[((nx-1)/2):] = 10

u=[u1,u2,u3]

u


# McCormack Example
# 
# def maccormack(u, nt, dt, dx,epsilon):
#     un = numpy.zeros((nt,len(u)))
#     un[:] = u.copy()
#     ustar = u.copy()
#     
#     for i in range(1,nt):
#         F = computeF(u)
#         
#         #add damping
#         ustar[:-1] =(epsilon*(u[1:]-2*u[:-1]+u[:-1]))+(u[:-1] - dt/dx * (F[1:]-F[:-1]))
#         
#         Fstar = computeF(ustar)
#         #print len(Fstar)
#         un[i,1:] = 0.5 * (u[1:]+ustar[1:] - dt/dx * (Fstar[1:] - Fstar[:-1]))
#         
#         u = un[i].copy()
#      
#         #Example Code
#         #F = computeF(u_max, rho_max, rho)
#         #rho_star[:-1] = rho[:-1] - dt/dx * (F[1:]-F[:-1])
#         #Fstar = computeF(u_max, rho_max, rho_star)
#         #rho_n[t,1:] = .5 * (rho[1:]+rho_star[1:] - dt/dx * (Fstar[1:] - Fstar[:-1]))
#         #rho = rho_n[t].copy()
#         
#     return un

# In[3]:

def Richtmyer(u,f,sigma):
    """Computes solution using a Richtmyer Method
    
    Params:
    ------
    u     : array of floats
            velocity at every point for current time step
    f     : array of floats
        ?????
    sigma : float
            delta t over delta x
            
    returns:
    --------
    u at next time step"""
    u_n = numpy.zeros((nt,len(u)))
    u_n[:] = u.copy()
    u_pred = u.copy()
    
    for t in range(1,nt):
        F = flux(gamma,u)
        u_pred[:-1] = 0.5*(u[] + u[1:]) - (sigma/2)*(F[1:] - F[:-1]) #is right what about u
        F_pred = flux(gamma,u_pred)
        u_n = u[1:] - sigma*(F_pred[i+.5n+.5] - F_pred[i-.5n+.5]) #how to do half steps
        u = u_n[t].copy()
    
    return u_n


# In[ ]:

def flux(gamma,u):
    """Computes Flux term
    
    Params:
    -------
    """
    for t in range(1,nt):
        f1_l[t] = u[2,t]
        f2_l[t] = (((u[2,t]**2)/u[1,t])+(gamma-1)*(u[3,t]-0.5*((u[2,t]**2)/u[1,t])))
        f3_l[t] = (u[3,t]+(gamma-1)*(u[3,t]-0.5*((u[2,t]**2)/u[1,t]))*(u[2,t]/u[1,t]))
    


# In[ ]:

#old

def leftflux(gamma,u):
    """Computes Flux term
    
    Params:
    -------
    """
    
    for t in range(1,nt):
        f1_l[t] = u2_l[t]
        f2_l[t] = (((u2_l[t]**2)/u1_l[t])+(gamma-1)*(u3_l[t]-0.5*((u2_l[t]**2)/u1_l[t])))
        f3_l[t] = (u3_l[t]+(gamma-1)*(u3_l[t]-0.5*((u2_l[t]**2)/u1_l[t]))*(u2_l[t]/u1_l[t]))


# In[ ]:

#old

def rightflux(gamma,u):
    """Computes Flux term
    
    Params:
    -------
    """
    
    for t in range(1,nt):
        f1_r[t] = u2_r[t]
        f2_r[t] = (((u2_r[t]**2)/u1_r[t])+(gamma-1)*(u3_r[t]-0.5*((u2_r[t]**2)/u1_r[t])))
        f3_r[t] = (u3_r[t]+(gamma-1)*(u3_r[t]-0.5*((u2_r[t]**2)/u1_r[t]))*(u2_r[t]/u1_r[t]))





